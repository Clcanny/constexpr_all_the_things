For submission: http://cppnow.org/submission/

* Speaker bios

** Jason Turner
jason@emptycrate.com

CppCast / C++ Weekly

Jason is a C++ developer, trainer and speaker; host of C++Weekly
https://www.youtube.com/c/JasonTurner-lefticus; co-host of CppCast
http://cppcast.com; co-creator and maintainer of the embedded scripting language
for C++, ChaiScript http://chaiscript.com; and author and curator of the
forkable coding standards document http://cppbestpractices.com.

Jason is the presenter of several previous C++Now and CppCon talks including
CppCon 2016's plenary session, "Rich Code for Tiny Computers: a Simple C64 Game
in C++17".

** Ben Deane
bdeane@blizzard.com

Blizzard Entertainment

Ben has been writing games for over 20 years, and in C++ for most of that. He is
currently a Principal Engineer at Blizzard Entertainment where he works on the
Battle.net team. He's always looking for useful new techniques in C++, and he
likes functional programming.

Ben is the presenter of several previous C++Now and CppCon talks, most recently
"Using Types Effectively" at CppCon 2016.

* Title

constexpr ALL the things!

* Tags

constexpr, zero-cost abstractions, compile-time computation, C++17, performance

* Session type

Tutorial

* Session length

Preferred: 90 mins
Min/Max: 90 mins

* Session level

Intermediate/Advanced

* Audience description

Library authors, application developers

* Abstract

constexpr: in C++11, a curiosity; in C++14, viable for more uses; now with added
power, in C++17 will it become an important tool in the programmer's toolkit?

In this talk we will examine the possibilities and power of constexpr and
explore what can (and what should) be done at compile-time with C++17. We'll
present techniques for building constexpr data structures and algorithms, and
look at what the standard provides and where it can improve. We'll also explore
constexpr use of user defined literals for expressive compile-time abstractions.

Compile-time computation offers perhaps the ultimate zero-cost abstraction, and
this talk attempts to gauge the power available with C++17 constexpr.


* Session Material

Source Code


* Outline

** Introduction
 - brief constexpr history & evolution
 - current constexpr concerns
 - the goal: a constexpr JSON UDL

** Representing JSON
 - constexpr strings
 - constexpr vectors
 - constexpr maps
 - algorithms and other STL shortcomings
 - a constexpr JSON value
 - constexpr allocator possibilities

** constexpr Parsing
 - simple parse functions
 - building parser combinators
 - parsing JSON, first cut

** Parsing Refinements
 - more complex parsing
 - multiple passes
 - improving compile times
 - removing storage and recursion limits

** Conclusion & Future Directions
 - constexpr constraints
 - containers and iterators
 - algorithms
 - compile-time performance

* Video URLs

Ben Deane - Using Types Effectively CppCon2016 - https://www.youtube.com/watch?v=ojZbFIQSdl8
Jason Turner - Rich Code For Tiny Computer CppCon2016 - https://www.youtube.com/watch?v=zBkNBP00wJE

Ben Deane & Jason Turner - constexpr ALL the Things! C++Now 2017 - https://www.youtube.com/watch?v=HMB9oXFobJc

* Comments for the Programming Committee

This talk was 90 minutes at C++Now; to fit the 1h slot we will condense some of
the front and end matter and concentrate on the techniques of building data
structures and parsing. And in our experience, CppCon talks run more quickly
than C++Now with typically less frequent audience interaction.
