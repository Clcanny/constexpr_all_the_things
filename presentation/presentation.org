#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1600 reveal_height:900
#+OPTIONS: toc:nil <:nil timestamp:nil email:t reveal_slide_number:"c/t"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: blood
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ./reveal.js/

#+TITLE: constexpr ALL the things!
#+AUTHOR: Ben Deane & Jason Turner
#+EMAIL: bdeane@blizzard.com, jason@emptycrate.com
#+DATE: May 16th, 2017

#+REVEAL_HTML: <script type="text/javascript" src="./presentation.js"></script>

* Title slide settings                                             :noexport:
#+BEGIN_SRC emacs-lisp
(setq org-reveal-title-slide
(concat "<img src=\"title.png\">"
"<h3>Ben Deane / <a href=\"mailto:bdeane@blizzard.com\">bdeane@blizzard.com</a> / "
"<a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3>"
"<h3>Jason Turner / <a href=\"mailto:jason@emptycrate.com\">jason@emptycrate.com</a> / "
"<a href=\"http://twitter.com/lefticus\">@lefticus</a></h3>"
"<h4>C++Now / Tuesday 16th May 2017</h4>"))
#+END_SRC

* Not Burying The Lede

We want to do this:

#+BEGIN_SRC c++
constexpr auto jsv
  = R"({
        "feature-x-enabled": true,
        "value-of-y": 1729,
        "z-options": {"a": null,
                      "b": "joshua",
                      "c": [6, 28, 496]}
       })"_json;
if constexpr (jsv["feature-x-enabled"]) {
  // code for feature x
} else {
  // code when feature x turned off
}
#+END_SRC

* First steps / Motivations

Jason: a bit about germane C++ Weekly stuff?

Ben: a bit about C++11 constexpr experiments

* Building Data Structures

** Requirements for compile-time types

** STL shortcomings
 - ~array~
 - ~string~
 - ~string_view~
 - ~pair~
 - ~optional~
 - ~variant~

* Algorithms

** Just make them all ~constexpr~ already
[[./bryce_tweet.png]]

* Literals

** Parsing
#+REVEAL_HTML: <br>

#+BEGIN_SRC haskell
Parser a :: String -> [(a, String)]
#+END_SRC
"A parser for things is a function from strings to lists of pairs of things and strings."

-- [[http://www.willamette.edu/~fruehr/haskell/seuss.html][Dr Seuss on parsers]]

#+REVEAL_HTML: <br><br>

Or in our case something like:
#+BEGIN_SRC c++
template <typename T>
using parser = optional<pair<T, string>> (*)(string);
#+END_SRC

(This slide illustrates the biggest problem in C++ today...)
